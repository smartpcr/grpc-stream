// source: greeter.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.streaming.GreetEveryoneRequest', null, global);
goog.exportSymbol('proto.streaming.GreetEveryoneResponse', null, global);
goog.exportSymbol('proto.streaming.GreetManyTimesRequest', null, global);
goog.exportSymbol('proto.streaming.GreetManyTimesResponse', null, global);
goog.exportSymbol('proto.streaming.Greeting', null, global);
goog.exportSymbol('proto.streaming.GreetingRequest', null, global);
goog.exportSymbol('proto.streaming.GreetingResponse', null, global);
goog.exportSymbol('proto.streaming.LongGreetRequest', null, global);
goog.exportSymbol('proto.streaming.LongGreetResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.streaming.Greeting = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.streaming.Greeting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.streaming.Greeting.displayName = 'proto.streaming.Greeting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.streaming.GreetingRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.streaming.GreetingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.streaming.GreetingRequest.displayName = 'proto.streaming.GreetingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.streaming.GreetingResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.streaming.GreetingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.streaming.GreetingResponse.displayName = 'proto.streaming.GreetingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.streaming.GreetManyTimesRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.streaming.GreetManyTimesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.streaming.GreetManyTimesRequest.displayName = 'proto.streaming.GreetManyTimesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.streaming.GreetManyTimesResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.streaming.GreetManyTimesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.streaming.GreetManyTimesResponse.displayName = 'proto.streaming.GreetManyTimesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.streaming.LongGreetRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.streaming.LongGreetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.streaming.LongGreetRequest.displayName = 'proto.streaming.LongGreetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.streaming.LongGreetResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.streaming.LongGreetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.streaming.LongGreetResponse.displayName = 'proto.streaming.LongGreetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.streaming.GreetEveryoneRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.streaming.GreetEveryoneRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.streaming.GreetEveryoneRequest.displayName = 'proto.streaming.GreetEveryoneRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.streaming.GreetEveryoneResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.streaming.GreetEveryoneResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.streaming.GreetEveryoneResponse.displayName = 'proto.streaming.GreetEveryoneResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.streaming.Greeting.prototype.toObject = function (opt_includeInstance) {
        return proto.streaming.Greeting.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.streaming.Greeting} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.streaming.Greeting.toObject = function (includeInstance, msg) {
        var f, obj = {
            firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            lastName: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.streaming.Greeting}
 */
proto.streaming.Greeting.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.streaming.Greeting;
    return proto.streaming.Greeting.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.streaming.Greeting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.streaming.Greeting}
 */
proto.streaming.Greeting.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFirstName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setLastName(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.streaming.Greeting.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.streaming.Greeting.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.streaming.Greeting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.streaming.Greeting.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFirstName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getLastName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.streaming.Greeting.prototype.getFirstName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.streaming.Greeting} returns this
 */
proto.streaming.Greeting.prototype.setFirstName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.streaming.Greeting.prototype.getLastName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.streaming.Greeting} returns this
 */
proto.streaming.Greeting.prototype.setLastName = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.streaming.GreetingRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.streaming.GreetingRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.streaming.GreetingRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.streaming.GreetingRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            greeting: (f = msg.getGreeting()) && proto.streaming.Greeting.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.streaming.GreetingRequest}
 */
proto.streaming.GreetingRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.streaming.GreetingRequest;
    return proto.streaming.GreetingRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.streaming.GreetingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.streaming.GreetingRequest}
 */
proto.streaming.GreetingRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.streaming.Greeting;
                reader.readMessage(value, proto.streaming.Greeting.deserializeBinaryFromReader);
                msg.setGreeting(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.streaming.GreetingRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.streaming.GreetingRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.streaming.GreetingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.streaming.GreetingRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getGreeting();
    if (f != null) {
        writer.writeMessage(1, f, proto.streaming.Greeting.serializeBinaryToWriter);
    }
};
/**
 * optional Greeting greeting = 1;
 * @return {?proto.streaming.Greeting}
 */
proto.streaming.GreetingRequest.prototype.getGreeting = function () {
    return /** @type{?proto.streaming.Greeting} */ (jspb.Message.getWrapperField(this, proto.streaming.Greeting, 1));
};
/**
 * @param {?proto.streaming.Greeting|undefined} value
 * @return {!proto.streaming.GreetingRequest} returns this
*/
proto.streaming.GreetingRequest.prototype.setGreeting = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.streaming.GreetingRequest} returns this
 */
proto.streaming.GreetingRequest.prototype.clearGreeting = function () {
    return this.setGreeting(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.streaming.GreetingRequest.prototype.hasGreeting = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.streaming.GreetingResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.streaming.GreetingResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.streaming.GreetingResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.streaming.GreetingResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.streaming.GreetingResponse}
 */
proto.streaming.GreetingResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.streaming.GreetingResponse;
    return proto.streaming.GreetingResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.streaming.GreetingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.streaming.GreetingResponse}
 */
proto.streaming.GreetingResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setResult(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.streaming.GreetingResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.streaming.GreetingResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.streaming.GreetingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.streaming.GreetingResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string result = 1;
 * @return {string}
 */
proto.streaming.GreetingResponse.prototype.getResult = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.streaming.GreetingResponse} returns this
 */
proto.streaming.GreetingResponse.prototype.setResult = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.streaming.GreetManyTimesRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.streaming.GreetManyTimesRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.streaming.GreetManyTimesRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.streaming.GreetManyTimesRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            greeting: (f = msg.getGreeting()) && proto.streaming.Greeting.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.streaming.GreetManyTimesRequest}
 */
proto.streaming.GreetManyTimesRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.streaming.GreetManyTimesRequest;
    return proto.streaming.GreetManyTimesRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.streaming.GreetManyTimesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.streaming.GreetManyTimesRequest}
 */
proto.streaming.GreetManyTimesRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.streaming.Greeting;
                reader.readMessage(value, proto.streaming.Greeting.deserializeBinaryFromReader);
                msg.setGreeting(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.streaming.GreetManyTimesRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.streaming.GreetManyTimesRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.streaming.GreetManyTimesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.streaming.GreetManyTimesRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getGreeting();
    if (f != null) {
        writer.writeMessage(1, f, proto.streaming.Greeting.serializeBinaryToWriter);
    }
};
/**
 * optional Greeting greeting = 1;
 * @return {?proto.streaming.Greeting}
 */
proto.streaming.GreetManyTimesRequest.prototype.getGreeting = function () {
    return /** @type{?proto.streaming.Greeting} */ (jspb.Message.getWrapperField(this, proto.streaming.Greeting, 1));
};
/**
 * @param {?proto.streaming.Greeting|undefined} value
 * @return {!proto.streaming.GreetManyTimesRequest} returns this
*/
proto.streaming.GreetManyTimesRequest.prototype.setGreeting = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.streaming.GreetManyTimesRequest} returns this
 */
proto.streaming.GreetManyTimesRequest.prototype.clearGreeting = function () {
    return this.setGreeting(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.streaming.GreetManyTimesRequest.prototype.hasGreeting = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.streaming.GreetManyTimesResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.streaming.GreetManyTimesResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.streaming.GreetManyTimesResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.streaming.GreetManyTimesResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.streaming.GreetManyTimesResponse}
 */
proto.streaming.GreetManyTimesResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.streaming.GreetManyTimesResponse;
    return proto.streaming.GreetManyTimesResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.streaming.GreetManyTimesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.streaming.GreetManyTimesResponse}
 */
proto.streaming.GreetManyTimesResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setResult(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.streaming.GreetManyTimesResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.streaming.GreetManyTimesResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.streaming.GreetManyTimesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.streaming.GreetManyTimesResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string result = 1;
 * @return {string}
 */
proto.streaming.GreetManyTimesResponse.prototype.getResult = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.streaming.GreetManyTimesResponse} returns this
 */
proto.streaming.GreetManyTimesResponse.prototype.setResult = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.streaming.LongGreetRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.streaming.LongGreetRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.streaming.LongGreetRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.streaming.LongGreetRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            greeting: (f = msg.getGreeting()) && proto.streaming.Greeting.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.streaming.LongGreetRequest}
 */
proto.streaming.LongGreetRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.streaming.LongGreetRequest;
    return proto.streaming.LongGreetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.streaming.LongGreetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.streaming.LongGreetRequest}
 */
proto.streaming.LongGreetRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.streaming.Greeting;
                reader.readMessage(value, proto.streaming.Greeting.deserializeBinaryFromReader);
                msg.setGreeting(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.streaming.LongGreetRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.streaming.LongGreetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.streaming.LongGreetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.streaming.LongGreetRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getGreeting();
    if (f != null) {
        writer.writeMessage(1, f, proto.streaming.Greeting.serializeBinaryToWriter);
    }
};
/**
 * optional Greeting greeting = 1;
 * @return {?proto.streaming.Greeting}
 */
proto.streaming.LongGreetRequest.prototype.getGreeting = function () {
    return /** @type{?proto.streaming.Greeting} */ (jspb.Message.getWrapperField(this, proto.streaming.Greeting, 1));
};
/**
 * @param {?proto.streaming.Greeting|undefined} value
 * @return {!proto.streaming.LongGreetRequest} returns this
*/
proto.streaming.LongGreetRequest.prototype.setGreeting = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.streaming.LongGreetRequest} returns this
 */
proto.streaming.LongGreetRequest.prototype.clearGreeting = function () {
    return this.setGreeting(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.streaming.LongGreetRequest.prototype.hasGreeting = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.streaming.LongGreetResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.streaming.LongGreetResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.streaming.LongGreetResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.streaming.LongGreetResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.streaming.LongGreetResponse}
 */
proto.streaming.LongGreetResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.streaming.LongGreetResponse;
    return proto.streaming.LongGreetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.streaming.LongGreetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.streaming.LongGreetResponse}
 */
proto.streaming.LongGreetResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setResult(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.streaming.LongGreetResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.streaming.LongGreetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.streaming.LongGreetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.streaming.LongGreetResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string result = 1;
 * @return {string}
 */
proto.streaming.LongGreetResponse.prototype.getResult = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.streaming.LongGreetResponse} returns this
 */
proto.streaming.LongGreetResponse.prototype.setResult = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.streaming.GreetEveryoneRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.streaming.GreetEveryoneRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.streaming.GreetEveryoneRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.streaming.GreetEveryoneRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            greeting: (f = msg.getGreeting()) && proto.streaming.Greeting.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.streaming.GreetEveryoneRequest}
 */
proto.streaming.GreetEveryoneRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.streaming.GreetEveryoneRequest;
    return proto.streaming.GreetEveryoneRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.streaming.GreetEveryoneRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.streaming.GreetEveryoneRequest}
 */
proto.streaming.GreetEveryoneRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.streaming.Greeting;
                reader.readMessage(value, proto.streaming.Greeting.deserializeBinaryFromReader);
                msg.setGreeting(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.streaming.GreetEveryoneRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.streaming.GreetEveryoneRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.streaming.GreetEveryoneRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.streaming.GreetEveryoneRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getGreeting();
    if (f != null) {
        writer.writeMessage(1, f, proto.streaming.Greeting.serializeBinaryToWriter);
    }
};
/**
 * optional Greeting greeting = 1;
 * @return {?proto.streaming.Greeting}
 */
proto.streaming.GreetEveryoneRequest.prototype.getGreeting = function () {
    return /** @type{?proto.streaming.Greeting} */ (jspb.Message.getWrapperField(this, proto.streaming.Greeting, 1));
};
/**
 * @param {?proto.streaming.Greeting|undefined} value
 * @return {!proto.streaming.GreetEveryoneRequest} returns this
*/
proto.streaming.GreetEveryoneRequest.prototype.setGreeting = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.streaming.GreetEveryoneRequest} returns this
 */
proto.streaming.GreetEveryoneRequest.prototype.clearGreeting = function () {
    return this.setGreeting(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.streaming.GreetEveryoneRequest.prototype.hasGreeting = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.streaming.GreetEveryoneResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.streaming.GreetEveryoneResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.streaming.GreetEveryoneResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.streaming.GreetEveryoneResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.streaming.GreetEveryoneResponse}
 */
proto.streaming.GreetEveryoneResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.streaming.GreetEveryoneResponse;
    return proto.streaming.GreetEveryoneResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.streaming.GreetEveryoneResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.streaming.GreetEveryoneResponse}
 */
proto.streaming.GreetEveryoneResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setResult(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.streaming.GreetEveryoneResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.streaming.GreetEveryoneResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.streaming.GreetEveryoneResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.streaming.GreetEveryoneResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string result = 1;
 * @return {string}
 */
proto.streaming.GreetEveryoneResponse.prototype.getResult = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.streaming.GreetEveryoneResponse} returns this
 */
proto.streaming.GreetEveryoneResponse.prototype.setResult = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
goog.object.extend(exports, proto.streaming);
//# sourceMappingURL=greeter_pb.js.map